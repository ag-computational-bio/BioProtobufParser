// Code generated by protoc-gen-go. DO NOT EDIT.
// source: genbank.proto

/*
Package gbparse is a generated protocol buffer package.

It is generated from these files:
	genbank.proto

It has these top-level messages:
	Genbank
	Reference
	Feature
*/
package gbparse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Genbank struct {
	LOCUS      string       `protobuf:"bytes,1,opt,name=LOCUS" json:"LOCUS,omitempty"`
	ACCESSION  string       `protobuf:"bytes,2,opt,name=ACCESSION" json:"ACCESSION,omitempty"`
	DEFINITION string       `protobuf:"bytes,3,opt,name=DEFINITION" json:"DEFINITION,omitempty"`
	VERSION    string       `protobuf:"bytes,4,opt,name=VERSION" json:"VERSION,omitempty"`
	DBLINK     string       `protobuf:"bytes,5,opt,name=DBLINK" json:"DBLINK,omitempty"`
	KEYWORDS   string       `protobuf:"bytes,6,opt,name=KEYWORDS" json:"KEYWORDS,omitempty"`
	SOURCE     string       `protobuf:"bytes,7,opt,name=SOURCE" json:"SOURCE,omitempty"`
	ORGANISM   string       `protobuf:"bytes,8,opt,name=ORGANISM" json:"ORGANISM,omitempty"`
	COMMENT    string       `protobuf:"bytes,9,opt,name=COMMENT" json:"COMMENT,omitempty"`
	SEQUENCE   string       `protobuf:"bytes,10,opt,name=SEQUENCE" json:"SEQUENCE,omitempty"`
	REFERENCES []*Reference `protobuf:"bytes,11,rep,name=REFERENCES" json:"REFERENCES,omitempty"`
	FEATURES   []*Feature   `protobuf:"bytes,12,rep,name=FEATURES" json:"FEATURES,omitempty"`
}

func (m *Genbank) Reset()                    { *m = Genbank{} }
func (m *Genbank) String() string            { return proto.CompactTextString(m) }
func (*Genbank) ProtoMessage()               {}
func (*Genbank) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Genbank) GetLOCUS() string {
	if m != nil {
		return m.LOCUS
	}
	return ""
}

func (m *Genbank) GetACCESSION() string {
	if m != nil {
		return m.ACCESSION
	}
	return ""
}

func (m *Genbank) GetDEFINITION() string {
	if m != nil {
		return m.DEFINITION
	}
	return ""
}

func (m *Genbank) GetVERSION() string {
	if m != nil {
		return m.VERSION
	}
	return ""
}

func (m *Genbank) GetDBLINK() string {
	if m != nil {
		return m.DBLINK
	}
	return ""
}

func (m *Genbank) GetKEYWORDS() string {
	if m != nil {
		return m.KEYWORDS
	}
	return ""
}

func (m *Genbank) GetSOURCE() string {
	if m != nil {
		return m.SOURCE
	}
	return ""
}

func (m *Genbank) GetORGANISM() string {
	if m != nil {
		return m.ORGANISM
	}
	return ""
}

func (m *Genbank) GetCOMMENT() string {
	if m != nil {
		return m.COMMENT
	}
	return ""
}

func (m *Genbank) GetSEQUENCE() string {
	if m != nil {
		return m.SEQUENCE
	}
	return ""
}

func (m *Genbank) GetREFERENCES() []*Reference {
	if m != nil {
		return m.REFERENCES
	}
	return nil
}

func (m *Genbank) GetFEATURES() []*Feature {
	if m != nil {
		return m.FEATURES
	}
	return nil
}

type Reference struct {
	Number  int32  `protobuf:"varint,1,opt,name=Number" json:"Number,omitempty"`
	AUTHORS string `protobuf:"bytes,2,opt,name=AUTHORS" json:"AUTHORS,omitempty"`
	TITLE   string `protobuf:"bytes,3,opt,name=TITLE" json:"TITLE,omitempty"`
	JOURNAL string `protobuf:"bytes,4,opt,name=JOURNAL" json:"JOURNAL,omitempty"`
	PUBMED  string `protobuf:"bytes,5,opt,name=PUBMED" json:"PUBMED,omitempty"`
}

func (m *Reference) Reset()                    { *m = Reference{} }
func (m *Reference) String() string            { return proto.CompactTextString(m) }
func (*Reference) ProtoMessage()               {}
func (*Reference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reference) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Reference) GetAUTHORS() string {
	if m != nil {
		return m.AUTHORS
	}
	return ""
}

func (m *Reference) GetTITLE() string {
	if m != nil {
		return m.TITLE
	}
	return ""
}

func (m *Reference) GetJOURNAL() string {
	if m != nil {
		return m.JOURNAL
	}
	return ""
}

func (m *Reference) GetPUBMED() string {
	if m != nil {
		return m.PUBMED
	}
	return ""
}

type Feature struct {
	TYPE         string            `protobuf:"bytes,1,opt,name=TYPE" json:"TYPE,omitempty"`
	IsCompliment bool              `protobuf:"varint,2,opt,name=isCompliment" json:"isCompliment,omitempty"`
	START        string            `protobuf:"bytes,3,opt,name=START" json:"START,omitempty"`
	STOP         string            `protobuf:"bytes,4,opt,name=STOP" json:"STOP,omitempty"`
	QUALIFIERS   map[string]string `protobuf:"bytes,5,rep,name=QUALIFIERS" json:"QUALIFIERS,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (m *Feature) String() string            { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Feature) GetTYPE() string {
	if m != nil {
		return m.TYPE
	}
	return ""
}

func (m *Feature) GetIsCompliment() bool {
	if m != nil {
		return m.IsCompliment
	}
	return false
}

func (m *Feature) GetSTART() string {
	if m != nil {
		return m.START
	}
	return ""
}

func (m *Feature) GetSTOP() string {
	if m != nil {
		return m.STOP
	}
	return ""
}

func (m *Feature) GetQUALIFIERS() map[string]string {
	if m != nil {
		return m.QUALIFIERS
	}
	return nil
}

func init() {
	proto.RegisterType((*Genbank)(nil), "gbparse.Genbank")
	proto.RegisterType((*Reference)(nil), "gbparse.Reference")
	proto.RegisterType((*Feature)(nil), "gbparse.Feature")
}

func init() { proto.RegisterFile("genbank.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0x4f, 0x6b, 0xdb, 0x40,
	0x10, 0xc5, 0x91, 0x1d, 0x5b, 0xf6, 0x24, 0xa5, 0x61, 0x29, 0x65, 0x09, 0xa5, 0x18, 0x9f, 0x72,
	0x28, 0x3e, 0xa4, 0x97, 0x52, 0x28, 0x54, 0x91, 0x47, 0xa9, 0x1a, 0x59, 0xeb, 0xcc, 0xee, 0xb6,
	0xe4, 0x68, 0x97, 0x6d, 0x08, 0x89, 0x65, 0xa3, 0xd8, 0x85, 0x7c, 0x80, 0x7e, 0xdb, 0xde, 0x7b,
	0x2d, 0xfb, 0x47, 0x8a, 0x9b, 0xdb, 0xfe, 0xe6, 0xcd, 0x5b, 0x3f, 0x3f, 0x49, 0xf0, 0xe2, 0xc6,
	0x54, 0xcb, 0x45, 0x75, 0x37, 0xd9, 0xd4, 0xeb, 0xed, 0x9a, 0xc5, 0x37, 0xcb, 0xcd, 0xa2, 0x7e,
	0x30, 0xe3, 0xbf, 0x1d, 0x88, 0x2f, 0xbc, 0xc4, 0x5e, 0x41, 0xaf, 0x10, 0xa9, 0x96, 0x3c, 0x1a,
	0x45, 0xa7, 0x43, 0xf2, 0xc0, 0xde, 0xc0, 0x30, 0x49, 0x53, 0x94, 0x32, 0x17, 0x25, 0xef, 0x38,
	0xe5, 0x69, 0xc0, 0xde, 0x02, 0x4c, 0x31, 0xcb, 0xcb, 0x5c, 0x59, 0xb9, 0xeb, 0xe4, 0xbd, 0x09,
	0xe3, 0x10, 0x7f, 0x43, 0x72, 0xde, 0x03, 0x27, 0x36, 0xc8, 0x5e, 0x43, 0x7f, 0x7a, 0x5e, 0xe4,
	0xe5, 0x25, 0xef, 0x39, 0x21, 0x10, 0x3b, 0x81, 0xc1, 0x25, 0x5e, 0x7f, 0x17, 0x34, 0x95, 0xbc,
	0xef, 0x94, 0x96, 0xad, 0x47, 0x0a, 0x4d, 0x29, 0xf2, 0xd8, 0x7b, 0x3c, 0x59, 0x8f, 0xa0, 0x8b,
	0xa4, 0xcc, 0xe5, 0x8c, 0x0f, 0xbc, 0xa7, 0x61, 0x9b, 0x20, 0x15, 0xb3, 0x19, 0x96, 0x8a, 0x0f,
	0x7d, 0x82, 0x80, 0xd6, 0x25, 0xf1, 0x4a, 0x63, 0x99, 0x22, 0x07, 0xef, 0x6a, 0x98, 0x9d, 0x01,
	0x10, 0x66, 0x48, 0x16, 0x24, 0x3f, 0x1c, 0x75, 0x4f, 0x0f, 0xcf, 0xd8, 0x24, 0xb4, 0x36, 0x21,
	0xf3, 0xd3, 0xd4, 0xa6, 0xfa, 0x61, 0x68, 0x6f, 0x8b, 0xbd, 0x83, 0x41, 0x86, 0x89, 0xd2, 0x84,
	0x92, 0x1f, 0x39, 0xc7, 0x71, 0xeb, 0xc8, 0xcc, 0x62, 0xbb, 0xab, 0x0d, 0xb5, 0x1b, 0xe3, 0xdf,
	0x11, 0x0c, 0xdb, 0x7b, 0xec, 0x3f, 0x2b, 0x77, 0xab, 0xa5, 0xa9, 0x5d, 0xf9, 0x3d, 0x0a, 0x64,
	0xd3, 0x27, 0x5a, 0x7d, 0x11, 0x24, 0x43, 0xf7, 0x0d, 0xda, 0xa7, 0xa5, 0x72, 0x55, 0x60, 0x28,
	0xdd, 0x83, 0xdd, 0xff, 0x2a, 0x34, 0x95, 0x49, 0xd1, 0xf4, 0x1d, 0xd0, 0xfe, 0xc2, 0x5c, 0x9f,
	0xcf, 0x70, 0xda, 0xf4, 0xed, 0x69, 0xfc, 0x27, 0x82, 0x38, 0xa4, 0x63, 0x0c, 0x0e, 0xd4, 0xf5,
	0x1c, 0xc3, 0x0b, 0xe0, 0xce, 0x6c, 0x0c, 0x47, 0xb7, 0x0f, 0xe9, 0x7a, 0xb5, 0xb9, 0xbf, 0x5d,
	0x99, 0x6a, 0xeb, 0x62, 0x0c, 0xe8, 0xbf, 0x99, 0xcd, 0x22, 0x55, 0x42, 0xaa, 0xc9, 0xe2, 0xc0,
	0xde, 0x26, 0x95, 0x98, 0x87, 0x20, 0xee, 0xcc, 0x3e, 0x03, 0x5c, 0xe9, 0xa4, 0xc8, 0xb3, 0x1c,
	0x49, 0xf2, 0x9e, 0x6b, 0x69, 0xf4, 0xbc, 0xa5, 0xc9, 0xd3, 0x0a, 0x56, 0xdb, 0xfa, 0x91, 0xf6,
	0x3c, 0x27, 0x9f, 0xe0, 0xe5, 0x33, 0x99, 0x1d, 0x43, 0xf7, 0xce, 0x3c, 0x86, 0xd4, 0xf6, 0x68,
	0x03, 0xfd, 0x5a, 0xdc, 0xef, 0x4c, 0x28, 0xcd, 0xc3, 0xc7, 0xce, 0x87, 0x68, 0xd9, 0x77, 0x1f,
	0xc0, 0xfb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xa4, 0x16, 0x5a, 0x11, 0x03, 0x00, 0x00,
}
