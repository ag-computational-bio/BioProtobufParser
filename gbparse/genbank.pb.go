// Code generated by protoc-gen-go. DO NOT EDIT.
// source: genbank.proto

package gbparse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Genbank struct {
	LOCUS      string       `protobuf:"bytes,1,opt,name=LOCUS" json:"LOCUS,omitempty"`
	ACCESSION  string       `protobuf:"bytes,2,opt,name=ACCESSION" json:"ACCESSION,omitempty"`
	DEFINITION string       `protobuf:"bytes,3,opt,name=DEFINITION" json:"DEFINITION,omitempty"`
	VERSION    string       `protobuf:"bytes,4,opt,name=VERSION" json:"VERSION,omitempty"`
	DBLINK     []string     `protobuf:"bytes,5,rep,name=DBLINK" json:"DBLINK,omitempty"`
	KEYWORDS   string       `protobuf:"bytes,6,opt,name=KEYWORDS" json:"KEYWORDS,omitempty"`
	SOURCE     string       `protobuf:"bytes,7,opt,name=SOURCE" json:"SOURCE,omitempty"`
	ORGANISM   []string     `protobuf:"bytes,8,rep,name=ORGANISM" json:"ORGANISM,omitempty"`
	COMMENT    string       `protobuf:"bytes,9,opt,name=COMMENT" json:"COMMENT,omitempty"`
	SEQUENCE   string       `protobuf:"bytes,10,opt,name=SEQUENCE" json:"SEQUENCE,omitempty"`
	CONTIG     string       `protobuf:"bytes,11,opt,name=CONTIG" json:"CONTIG,omitempty"`
	REFERENCES []*Reference `protobuf:"bytes,12,rep,name=REFERENCES" json:"REFERENCES,omitempty"`
	FEATURES   []*Feature   `protobuf:"bytes,13,rep,name=FEATURES" json:"FEATURES,omitempty"`
}

func (m *Genbank) Reset()                    { *m = Genbank{} }
func (m *Genbank) String() string            { return proto.CompactTextString(m) }
func (*Genbank) ProtoMessage()               {}
func (*Genbank) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Genbank) GetLOCUS() string {
	if m != nil {
		return m.LOCUS
	}
	return ""
}

func (m *Genbank) GetACCESSION() string {
	if m != nil {
		return m.ACCESSION
	}
	return ""
}

func (m *Genbank) GetDEFINITION() string {
	if m != nil {
		return m.DEFINITION
	}
	return ""
}

func (m *Genbank) GetVERSION() string {
	if m != nil {
		return m.VERSION
	}
	return ""
}

func (m *Genbank) GetDBLINK() []string {
	if m != nil {
		return m.DBLINK
	}
	return nil
}

func (m *Genbank) GetKEYWORDS() string {
	if m != nil {
		return m.KEYWORDS
	}
	return ""
}

func (m *Genbank) GetSOURCE() string {
	if m != nil {
		return m.SOURCE
	}
	return ""
}

func (m *Genbank) GetORGANISM() []string {
	if m != nil {
		return m.ORGANISM
	}
	return nil
}

func (m *Genbank) GetCOMMENT() string {
	if m != nil {
		return m.COMMENT
	}
	return ""
}

func (m *Genbank) GetSEQUENCE() string {
	if m != nil {
		return m.SEQUENCE
	}
	return ""
}

func (m *Genbank) GetCONTIG() string {
	if m != nil {
		return m.CONTIG
	}
	return ""
}

func (m *Genbank) GetREFERENCES() []*Reference {
	if m != nil {
		return m.REFERENCES
	}
	return nil
}

func (m *Genbank) GetFEATURES() []*Feature {
	if m != nil {
		return m.FEATURES
	}
	return nil
}

type Reference struct {
	Number  int32  `protobuf:"varint,1,opt,name=Number" json:"Number,omitempty"`
	ORIGIN  string `protobuf:"bytes,2,opt,name=ORIGIN" json:"ORIGIN,omitempty"`
	AUTHORS string `protobuf:"bytes,3,opt,name=AUTHORS" json:"AUTHORS,omitempty"`
	CONSRTM string `protobuf:"bytes,4,opt,name=CONSRTM" json:"CONSRTM,omitempty"`
	TITLE   string `protobuf:"bytes,5,opt,name=TITLE" json:"TITLE,omitempty"`
	JOURNAL string `protobuf:"bytes,6,opt,name=JOURNAL" json:"JOURNAL,omitempty"`
	PUBMED  string `protobuf:"bytes,7,opt,name=PUBMED" json:"PUBMED,omitempty"`
}

func (m *Reference) Reset()                    { *m = Reference{} }
func (m *Reference) String() string            { return proto.CompactTextString(m) }
func (*Reference) ProtoMessage()               {}
func (*Reference) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Reference) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Reference) GetORIGIN() string {
	if m != nil {
		return m.ORIGIN
	}
	return ""
}

func (m *Reference) GetAUTHORS() string {
	if m != nil {
		return m.AUTHORS
	}
	return ""
}

func (m *Reference) GetCONSRTM() string {
	if m != nil {
		return m.CONSRTM
	}
	return ""
}

func (m *Reference) GetTITLE() string {
	if m != nil {
		return m.TITLE
	}
	return ""
}

func (m *Reference) GetJOURNAL() string {
	if m != nil {
		return m.JOURNAL
	}
	return ""
}

func (m *Reference) GetPUBMED() string {
	if m != nil {
		return m.PUBMED
	}
	return ""
}

type Feature struct {
	TYPE         string            `protobuf:"bytes,1,opt,name=TYPE" json:"TYPE,omitempty"`
	IsCompliment bool              `protobuf:"varint,2,opt,name=isCompliment" json:"isCompliment,omitempty"`
	START        string            `protobuf:"bytes,3,opt,name=START" json:"START,omitempty"`
	STOP         string            `protobuf:"bytes,4,opt,name=STOP" json:"STOP,omitempty"`
	QUALIFIERS   map[string]string `protobuf:"bytes,5,rep,name=QUALIFIERS" json:"QUALIFIERS,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (m *Feature) String() string            { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Feature) GetTYPE() string {
	if m != nil {
		return m.TYPE
	}
	return ""
}

func (m *Feature) GetIsCompliment() bool {
	if m != nil {
		return m.IsCompliment
	}
	return false
}

func (m *Feature) GetSTART() string {
	if m != nil {
		return m.START
	}
	return ""
}

func (m *Feature) GetSTOP() string {
	if m != nil {
		return m.STOP
	}
	return ""
}

func (m *Feature) GetQUALIFIERS() map[string]string {
	if m != nil {
		return m.QUALIFIERS
	}
	return nil
}

func init() {
	proto.RegisterType((*Genbank)(nil), "gbparse.Genbank")
	proto.RegisterType((*Reference)(nil), "gbparse.Reference")
	proto.RegisterType((*Feature)(nil), "gbparse.Feature")
}

func init() { proto.RegisterFile("genbank.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0xdf, 0x6a, 0xdb, 0x30,
	0x14, 0xc6, 0x49, 0xd3, 0xfc, 0xf1, 0x49, 0xcb, 0x8a, 0x18, 0x43, 0x94, 0x31, 0x42, 0xae, 0x72,
	0x31, 0x72, 0x91, 0xdd, 0x8c, 0xc1, 0x60, 0xae, 0x23, 0x67, 0x5a, 0x6d, 0x29, 0x3d, 0x92, 0x37,
	0x7a, 0x99, 0x0c, 0xad, 0x94, 0x36, 0x4e, 0x70, 0x93, 0x41, 0x9f, 0x62, 0x8f, 0xb3, 0x97, 0xda,
	0x43, 0x0c, 0xfd, 0xb1, 0x9b, 0xf6, 0x4e, 0x3f, 0x9d, 0xf3, 0x49, 0x9f, 0xcf, 0x27, 0xc3, 0xe9,
	0x8d, 0x29, 0x57, 0xcb, 0xf2, 0x6e, 0xb2, 0xad, 0x36, 0xbb, 0x0d, 0xe9, 0xdd, 0xac, 0xb6, 0xcb,
	0xea, 0xc1, 0x8c, 0xfe, 0xb4, 0xa1, 0x37, 0xf7, 0x25, 0xf2, 0x1a, 0x3a, 0x99, 0x4c, 0x0a, 0x45,
	0x5b, 0xc3, 0xd6, 0x38, 0x42, 0x0f, 0xe4, 0x2d, 0x44, 0x71, 0x92, 0x30, 0xa5, 0xb8, 0x14, 0xf4,
	0xc8, 0x55, 0x9e, 0x36, 0xc8, 0x3b, 0x80, 0x19, 0x4b, 0xb9, 0xe0, 0xda, 0x96, 0xdb, 0xae, 0x7c,
	0xb0, 0x43, 0x28, 0xf4, 0xbe, 0x33, 0x74, 0xda, 0x63, 0x57, 0xac, 0x91, 0xbc, 0x81, 0xee, 0xec,
	0x22, 0xe3, 0xe2, 0x92, 0x76, 0x86, 0xed, 0x71, 0x84, 0x81, 0xc8, 0x39, 0xf4, 0x2f, 0xd9, 0xf5,
	0x0f, 0x89, 0x33, 0x45, 0xbb, 0x4e, 0xd2, 0xb0, 0xd5, 0x28, 0x59, 0x60, 0xc2, 0x68, 0xcf, 0x55,
	0x02, 0x59, 0x8d, 0xc4, 0x79, 0x2c, 0xb8, 0xca, 0x69, 0xdf, 0x9d, 0xd6, 0xb0, 0x75, 0x90, 0xc8,
	0x3c, 0x67, 0x42, 0xd3, 0xc8, 0x3b, 0x08, 0x68, 0x55, 0x8a, 0x5d, 0x15, 0x4c, 0x24, 0x8c, 0x82,
	0xbf, 0xa9, 0x66, 0x7b, 0x53, 0x22, 0x85, 0xe6, 0x73, 0x3a, 0xf0, 0x37, 0x79, 0x22, 0x53, 0x00,
	0x64, 0x29, 0x43, 0xdb, 0xa4, 0xe8, 0xc9, 0xb0, 0x3d, 0x1e, 0x4c, 0xc9, 0x24, 0x4c, 0x73, 0x82,
	0xe6, 0x97, 0xa9, 0x4c, 0xf9, 0xd3, 0xe0, 0x41, 0x17, 0x79, 0x0f, 0xfd, 0x94, 0xc5, 0xba, 0x40,
	0xa6, 0xe8, 0xa9, 0x53, 0x9c, 0x35, 0x8a, 0xd4, 0x2c, 0x77, 0xfb, 0xca, 0x60, 0xd3, 0x31, 0xfa,
	0xdb, 0x82, 0xa8, 0x39, 0xc7, 0xfa, 0x10, 0xfb, 0xf5, 0xca, 0x54, 0x2e, 0x94, 0x0e, 0x06, 0xb2,
	0xfb, 0x12, 0xf9, 0x9c, 0xd7, 0x91, 0x04, 0xb2, 0x5f, 0x1b, 0x17, 0xfa, 0xab, 0x44, 0x15, 0xc2,
	0xa8, 0xd1, 0xcf, 0x41, 0x28, 0xd4, 0x79, 0x9d, 0x44, 0x40, 0x9b, 0xbb, 0xe6, 0x3a, 0x63, 0xb4,
	0xe3, 0x73, 0x77, 0x60, 0xfb, 0xbf, 0xc9, 0x02, 0x45, 0x9c, 0x85, 0x18, 0x6a, 0xb4, 0x77, 0x2f,
	0x8a, 0x8b, 0x9c, 0xcd, 0xea, 0x14, 0x3c, 0x8d, 0xfe, 0xb5, 0xa0, 0x17, 0xbe, 0x87, 0x10, 0x38,
	0xd6, 0xd7, 0x0b, 0x16, 0x9e, 0x92, 0x5b, 0x93, 0x11, 0x9c, 0xdc, 0x3e, 0x24, 0x9b, 0xf5, 0xf6,
	0xfe, 0x76, 0x6d, 0xca, 0x9d, 0x73, 0xde, 0xc7, 0x67, 0x7b, 0xd6, 0x8b, 0xd2, 0x31, 0xea, 0xe0,
	0xde, 0x83, 0x3d, 0x4d, 0x69, 0xb9, 0x08, 0xc6, 0xdd, 0x9a, 0x7c, 0x01, 0xb8, 0x2a, 0xe2, 0x8c,
	0xa7, 0x9c, 0xa1, 0x72, 0x6f, 0x68, 0x30, 0x1d, 0xbe, 0x9c, 0xeb, 0xe4, 0xa9, 0x85, 0x95, 0xbb,
	0xea, 0x11, 0x0f, 0x34, 0xe7, 0x9f, 0xe1, 0xd5, 0x8b, 0x32, 0x39, 0x83, 0xf6, 0x9d, 0x79, 0x0c,
	0xae, 0xed, 0xd2, 0x1a, 0xfa, 0xbd, 0xbc, 0xdf, 0x9b, 0x30, 0x67, 0x0f, 0x9f, 0x8e, 0x3e, 0xb6,
	0x56, 0x5d, 0xf7, 0x2b, 0x7d, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x62, 0x1f, 0x99, 0x81, 0x5b,
	0x03, 0x00, 0x00,
}
